// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SendBaoReward extends ethereum.Event {
  get params(): SendBaoReward__Params {
    return new SendBaoReward__Params(this);
  }
}

export class SendBaoReward__Params {
  _event: SendBaoReward;

  constructor(event: SendBaoReward) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lockAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BaoMasterFarmer__getPoolRewardResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class BaoMasterFarmer__poolInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class BaoMasterFarmer__userGlobalInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class BaoMasterFarmer__userInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class BaoMasterFarmer extends ethereum.SmartContract {
  static bind(address: Address): BaoMasterFarmer {
    return new BaoMasterFarmer("BaoMasterFarmer", address);
  }

  Bao(): Address {
    let result = super.call("Bao", "Bao():(address)", []);

    return result[0].toAddress();
  }

  try_Bao(): ethereum.CallResult<Address> {
    let result = super.tryCall("Bao", "Bao():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  FINISH_BONUS_AT_BLOCK(): BigInt {
    let result = super.call(
      "FINISH_BONUS_AT_BLOCK",
      "FINISH_BONUS_AT_BLOCK():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_FINISH_BONUS_AT_BLOCK(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FINISH_BONUS_AT_BLOCK",
      "FINISH_BONUS_AT_BLOCK():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  HALVING_AT_BLOCK(param0: BigInt): BigInt {
    let result = super.call(
      "HALVING_AT_BLOCK",
      "HALVING_AT_BLOCK(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_HALVING_AT_BLOCK(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "HALVING_AT_BLOCK",
      "HALVING_AT_BLOCK(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERCENT_FOR_COM(): BigInt {
    let result = super.call(
      "PERCENT_FOR_COM",
      "PERCENT_FOR_COM():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERCENT_FOR_COM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENT_FOR_COM",
      "PERCENT_FOR_COM():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERCENT_FOR_DEV(): BigInt {
    let result = super.call(
      "PERCENT_FOR_DEV",
      "PERCENT_FOR_DEV():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERCENT_FOR_DEV(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENT_FOR_DEV",
      "PERCENT_FOR_DEV():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERCENT_FOR_FOUNDERS(): BigInt {
    let result = super.call(
      "PERCENT_FOR_FOUNDERS",
      "PERCENT_FOR_FOUNDERS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERCENT_FOR_FOUNDERS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENT_FOR_FOUNDERS",
      "PERCENT_FOR_FOUNDERS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERCENT_FOR_LP(): BigInt {
    let result = super.call("PERCENT_FOR_LP", "PERCENT_FOR_LP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PERCENT_FOR_LP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENT_FOR_LP",
      "PERCENT_FOR_LP():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERCENT_LOCK_BONUS_REWARD(): BigInt {
    let result = super.call(
      "PERCENT_LOCK_BONUS_REWARD",
      "PERCENT_LOCK_BONUS_REWARD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERCENT_LOCK_BONUS_REWARD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENT_LOCK_BONUS_REWARD",
      "PERCENT_LOCK_BONUS_REWARD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REWARD_MULTIPLIER(param0: BigInt): BigInt {
    let result = super.call(
      "REWARD_MULTIPLIER",
      "REWARD_MULTIPLIER(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_REWARD_MULTIPLIER(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REWARD_MULTIPLIER",
      "REWARD_MULTIPLIER(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REWARD_PER_BLOCK(): BigInt {
    let result = super.call(
      "REWARD_PER_BLOCK",
      "REWARD_PER_BLOCK():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_REWARD_PER_BLOCK(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REWARD_PER_BLOCK",
      "REWARD_PER_BLOCK():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  START_BLOCK(): BigInt {
    let result = super.call("START_BLOCK", "START_BLOCK():(uint256)", []);

    return result[0].toBigInt();
  }

  try_START_BLOCK(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("START_BLOCK", "START_BLOCK():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  authorized(param0: Address): boolean {
    let result = super.call("authorized", "authorized(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_authorized(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("authorized", "authorized(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  blockDeltaEndStage(param0: BigInt): BigInt {
    let result = super.call(
      "blockDeltaEndStage",
      "blockDeltaEndStage(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_blockDeltaEndStage(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "blockDeltaEndStage",
      "blockDeltaEndStage(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blockDeltaStartStage(param0: BigInt): BigInt {
    let result = super.call(
      "blockDeltaStartStage",
      "blockDeltaStartStage(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_blockDeltaStartStage(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "blockDeltaStartStage",
      "blockDeltaStartStage(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  comfundaddr(): Address {
    let result = super.call("comfundaddr", "comfundaddr():(address)", []);

    return result[0].toAddress();
  }

  try_comfundaddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("comfundaddr", "comfundaddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  devDepFee(): BigInt {
    let result = super.call("devDepFee", "devDepFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_devDepFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("devDepFee", "devDepFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  devFeeStage(param0: BigInt): BigInt {
    let result = super.call("devFeeStage", "devFeeStage(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_devFeeStage(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "devFeeStage",
      "devFeeStage(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  devaddr(): Address {
    let result = super.call("devaddr", "devaddr():(address)", []);

    return result[0].toAddress();
  }

  try_devaddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("devaddr", "devaddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  founderaddr(): Address {
    let result = super.call("founderaddr", "founderaddr():(address)", []);

    return result[0].toAddress();
  }

  try_founderaddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("founderaddr", "founderaddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGlobalAmount(_user: Address): BigInt {
    let result = super.call(
      "getGlobalAmount",
      "getGlobalAmount(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getGlobalAmount(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGlobalAmount",
      "getGlobalAmount(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGlobalRefAmount(_user: Address): BigInt {
    let result = super.call(
      "getGlobalRefAmount",
      "getGlobalRefAmount(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getGlobalRefAmount(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGlobalRefAmount",
      "getGlobalRefAmount(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMultiplier(_from: BigInt, _to: BigInt): BigInt {
    let result = super.call(
      "getMultiplier",
      "getMultiplier(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_from),
        ethereum.Value.fromUnsignedBigInt(_to)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMultiplier(_from: BigInt, _to: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMultiplier",
      "getMultiplier(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_from),
        ethereum.Value.fromUnsignedBigInt(_to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNewRewardPerBlock(pid1: BigInt): BigInt {
    let result = super.call(
      "getNewRewardPerBlock",
      "getNewRewardPerBlock(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(pid1)]
    );

    return result[0].toBigInt();
  }

  try_getNewRewardPerBlock(pid1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNewRewardPerBlock",
      "getNewRewardPerBlock(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(pid1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolReward(
    _from: BigInt,
    _to: BigInt,
    _allocPoint: BigInt
  ): BaoMasterFarmer__getPoolRewardResult {
    let result = super.call(
      "getPoolReward",
      "getPoolReward(uint256,uint256,uint256):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_from),
        ethereum.Value.fromUnsignedBigInt(_to),
        ethereum.Value.fromUnsignedBigInt(_allocPoint)
      ]
    );

    return new BaoMasterFarmer__getPoolRewardResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getPoolReward(
    _from: BigInt,
    _to: BigInt,
    _allocPoint: BigInt
  ): ethereum.CallResult<BaoMasterFarmer__getPoolRewardResult> {
    let result = super.tryCall(
      "getPoolReward",
      "getPoolReward(uint256,uint256,uint256):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_from),
        ethereum.Value.fromUnsignedBigInt(_to),
        ethereum.Value.fromUnsignedBigInt(_allocPoint)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BaoMasterFarmer__getPoolRewardResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getRefValueOf(_user: Address, _user2: Address): BigInt {
    let result = super.call(
      "getRefValueOf",
      "getRefValueOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_user2)]
    );

    return result[0].toBigInt();
  }

  try_getRefValueOf(
    _user: Address,
    _user2: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRefValueOf",
      "getRefValueOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_user2)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalRefs(_user: Address): BigInt {
    let result = super.call("getTotalRefs", "getTotalRefs(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);

    return result[0].toBigInt();
  }

  try_getTotalRefs(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalRefs",
      "getTotalRefs(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityaddr(): Address {
    let result = super.call("liquidityaddr", "liquidityaddr():(address)", []);

    return result[0].toAddress();
  }

  try_liquidityaddr(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityaddr",
      "liquidityaddr():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  migrator(): Address {
    let result = super.call("migrator", "migrator():(address)", []);

    return result[0].toAddress();
  }

  try_migrator(): ethereum.CallResult<Address> {
    let result = super.tryCall("migrator", "migrator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingReward(_pid: BigInt, _user: Address): BigInt {
    let result = super.call(
      "pendingReward",
      "pendingReward(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBigInt();
  }

  try_pendingReward(_pid: BigInt, _user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingReward",
      "pendingReward(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolId1(param0: Address): BigInt {
    let result = super.call("poolId1", "poolId1(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_poolId1(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolId1", "poolId1(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolInfo(param0: BigInt): BaoMasterFarmer__poolInfoResult {
    let result = super.call(
      "poolInfo",
      "poolInfo(uint256):(address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BaoMasterFarmer__poolInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_poolInfo(
    param0: BigInt
  ): ethereum.CallResult<BaoMasterFarmer__poolInfoResult> {
    let result = super.tryCall(
      "poolInfo",
      "poolInfo(uint256):(address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BaoMasterFarmer__poolInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  poolLength(): BigInt {
    let result = super.call("poolLength", "poolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolLength", "poolLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAllocPoint(): BigInt {
    let result = super.call(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAllocPoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdOracle(): Address {
    let result = super.call("usdOracle", "usdOracle():(address)", []);

    return result[0].toAddress();
  }

  try_usdOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdOracle", "usdOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userDelta(_pid: BigInt): BigInt {
    let result = super.call("userDelta", "userDelta(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_pid)
    ]);

    return result[0].toBigInt();
  }

  try_userDelta(_pid: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("userDelta", "userDelta(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_pid)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userDepFee(): BigInt {
    let result = super.call("userDepFee", "userDepFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_userDepFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("userDepFee", "userDepFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userFeeStage(param0: BigInt): BigInt {
    let result = super.call("userFeeStage", "userFeeStage(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_userFeeStage(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userFeeStage",
      "userFeeStage(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userGlobalInfo(param0: Address): BaoMasterFarmer__userGlobalInfoResult {
    let result = super.call(
      "userGlobalInfo",
      "userGlobalInfo(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new BaoMasterFarmer__userGlobalInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_userGlobalInfo(
    param0: Address
  ): ethereum.CallResult<BaoMasterFarmer__userGlobalInfoResult> {
    let result = super.tryCall(
      "userGlobalInfo",
      "userGlobalInfo(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BaoMasterFarmer__userGlobalInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  userInfo(param0: BigInt, param1: Address): BaoMasterFarmer__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new BaoMasterFarmer__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_userInfo(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BaoMasterFarmer__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BaoMasterFarmer__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _Bao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _devaddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _liquidityaddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _comfundaddr(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _founderaddr(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _rewardPerBlock(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _startBlock(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _halvingAfterBlock(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _userDepFee(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _devDepFee(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _blockDeltaStartStage(): Array<BigInt> {
    return this._call.inputValues[10].value.toBigIntArray();
  }

  get _blockDeltaEndStage(): Array<BigInt> {
    return this._call.inputValues[11].value.toBigIntArray();
  }

  get _userFeeStage(): Array<BigInt> {
    return this._call.inputValues[12].value.toBigIntArray();
  }

  get _devFeeStage(): Array<BigInt> {
    return this._call.inputValues[13].value.toBigIntArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lpToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _withUpdate(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class AddAuthorizedCall extends ethereum.Call {
  get inputs(): AddAuthorizedCall__Inputs {
    return new AddAuthorizedCall__Inputs(this);
  }

  get outputs(): AddAuthorizedCall__Outputs {
    return new AddAuthorizedCall__Outputs(this);
  }
}

export class AddAuthorizedCall__Inputs {
  _call: AddAuthorizedCall;

  constructor(call: AddAuthorizedCall) {
    this._call = call;
  }

  get _toAdd(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAuthorizedCall__Outputs {
  _call: AddAuthorizedCall;

  constructor(call: AddAuthorizedCall) {
    this._call = call;
  }
}

export class BonusFinishUpdateCall extends ethereum.Call {
  get inputs(): BonusFinishUpdateCall__Inputs {
    return new BonusFinishUpdateCall__Inputs(this);
  }

  get outputs(): BonusFinishUpdateCall__Outputs {
    return new BonusFinishUpdateCall__Outputs(this);
  }
}

export class BonusFinishUpdateCall__Inputs {
  _call: BonusFinishUpdateCall;

  constructor(call: BonusFinishUpdateCall) {
    this._call = call;
  }

  get _newFinish(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BonusFinishUpdateCall__Outputs {
  _call: BonusFinishUpdateCall;

  constructor(call: BonusFinishUpdateCall) {
    this._call = call;
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }
}

export class ComUpdateCall extends ethereum.Call {
  get inputs(): ComUpdateCall__Inputs {
    return new ComUpdateCall__Inputs(this);
  }

  get outputs(): ComUpdateCall__Outputs {
    return new ComUpdateCall__Outputs(this);
  }
}

export class ComUpdateCall__Inputs {
  _call: ComUpdateCall;

  constructor(call: ComUpdateCall) {
    this._call = call;
  }

  get _newCom(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ComUpdateCall__Outputs {
  _call: ComUpdateCall;

  constructor(call: ComUpdateCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _ref(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DevCall extends ethereum.Call {
  get inputs(): DevCall__Inputs {
    return new DevCall__Inputs(this);
  }

  get outputs(): DevCall__Outputs {
    return new DevCall__Outputs(this);
  }
}

export class DevCall__Inputs {
  _call: DevCall;

  constructor(call: DevCall) {
    this._call = call;
  }

  get _devaddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DevCall__Outputs {
  _call: DevCall;

  constructor(call: DevCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class FounderUpdateCall extends ethereum.Call {
  get inputs(): FounderUpdateCall__Inputs {
    return new FounderUpdateCall__Inputs(this);
  }

  get outputs(): FounderUpdateCall__Outputs {
    return new FounderUpdateCall__Outputs(this);
  }
}

export class FounderUpdateCall__Inputs {
  _call: FounderUpdateCall;

  constructor(call: FounderUpdateCall) {
    this._call = call;
  }

  get _newFounder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class FounderUpdateCall__Outputs {
  _call: FounderUpdateCall;

  constructor(call: FounderUpdateCall) {
    this._call = call;
  }
}

export class HalvingUpdateCall extends ethereum.Call {
  get inputs(): HalvingUpdateCall__Inputs {
    return new HalvingUpdateCall__Inputs(this);
  }

  get outputs(): HalvingUpdateCall__Outputs {
    return new HalvingUpdateCall__Outputs(this);
  }
}

export class HalvingUpdateCall__Inputs {
  _call: HalvingUpdateCall;

  constructor(call: HalvingUpdateCall) {
    this._call = call;
  }

  get _newHalving(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class HalvingUpdateCall__Outputs {
  _call: HalvingUpdateCall;

  constructor(call: HalvingUpdateCall) {
    this._call = call;
  }
}

export class LockUpdateCall extends ethereum.Call {
  get inputs(): LockUpdateCall__Inputs {
    return new LockUpdateCall__Inputs(this);
  }

  get outputs(): LockUpdateCall__Outputs {
    return new LockUpdateCall__Outputs(this);
  }
}

export class LockUpdateCall__Inputs {
  _call: LockUpdateCall;

  constructor(call: LockUpdateCall) {
    this._call = call;
  }

  get _newlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LockUpdateCall__Outputs {
  _call: LockUpdateCall;

  constructor(call: LockUpdateCall) {
    this._call = call;
  }
}

export class LockcomUpdateCall extends ethereum.Call {
  get inputs(): LockcomUpdateCall__Inputs {
    return new LockcomUpdateCall__Inputs(this);
  }

  get outputs(): LockcomUpdateCall__Outputs {
    return new LockcomUpdateCall__Outputs(this);
  }
}

export class LockcomUpdateCall__Inputs {
  _call: LockcomUpdateCall;

  constructor(call: LockcomUpdateCall) {
    this._call = call;
  }

  get _newcomlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LockcomUpdateCall__Outputs {
  _call: LockcomUpdateCall;

  constructor(call: LockcomUpdateCall) {
    this._call = call;
  }
}

export class LockdevUpdateCall extends ethereum.Call {
  get inputs(): LockdevUpdateCall__Inputs {
    return new LockdevUpdateCall__Inputs(this);
  }

  get outputs(): LockdevUpdateCall__Outputs {
    return new LockdevUpdateCall__Outputs(this);
  }
}

export class LockdevUpdateCall__Inputs {
  _call: LockdevUpdateCall;

  constructor(call: LockdevUpdateCall) {
    this._call = call;
  }

  get _newdevlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LockdevUpdateCall__Outputs {
  _call: LockdevUpdateCall;

  constructor(call: LockdevUpdateCall) {
    this._call = call;
  }
}

export class LockfounderUpdateCall extends ethereum.Call {
  get inputs(): LockfounderUpdateCall__Inputs {
    return new LockfounderUpdateCall__Inputs(this);
  }

  get outputs(): LockfounderUpdateCall__Outputs {
    return new LockfounderUpdateCall__Outputs(this);
  }
}

export class LockfounderUpdateCall__Inputs {
  _call: LockfounderUpdateCall;

  constructor(call: LockfounderUpdateCall) {
    this._call = call;
  }

  get _newfounderlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LockfounderUpdateCall__Outputs {
  _call: LockfounderUpdateCall;

  constructor(call: LockfounderUpdateCall) {
    this._call = call;
  }
}

export class LocklpUpdateCall extends ethereum.Call {
  get inputs(): LocklpUpdateCall__Inputs {
    return new LocklpUpdateCall__Inputs(this);
  }

  get outputs(): LocklpUpdateCall__Outputs {
    return new LocklpUpdateCall__Outputs(this);
  }
}

export class LocklpUpdateCall__Inputs {
  _call: LocklpUpdateCall;

  constructor(call: LocklpUpdateCall) {
    this._call = call;
  }

  get _newlplock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LocklpUpdateCall__Outputs {
  _call: LocklpUpdateCall;

  constructor(call: LocklpUpdateCall) {
    this._call = call;
  }
}

export class LpUpdateCall extends ethereum.Call {
  get inputs(): LpUpdateCall__Inputs {
    return new LpUpdateCall__Inputs(this);
  }

  get outputs(): LpUpdateCall__Outputs {
    return new LpUpdateCall__Outputs(this);
  }
}

export class LpUpdateCall__Inputs {
  _call: LpUpdateCall;

  constructor(call: LpUpdateCall) {
    this._call = call;
  }

  get _newLP(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class LpUpdateCall__Outputs {
  _call: LpUpdateCall;

  constructor(call: LpUpdateCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall extends ethereum.Call {
  get inputs(): MassUpdatePoolsCall__Inputs {
    return new MassUpdatePoolsCall__Inputs(this);
  }

  get outputs(): MassUpdatePoolsCall__Outputs {
    return new MassUpdatePoolsCall__Outputs(this);
  }
}

export class MassUpdatePoolsCall__Inputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall__Outputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class MigrateCall extends ethereum.Call {
  get inputs(): MigrateCall__Inputs {
    return new MigrateCall__Inputs(this);
  }

  get outputs(): MigrateCall__Outputs {
    return new MigrateCall__Outputs(this);
  }
}

export class MigrateCall__Inputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MigrateCall__Outputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class RemoveAuthorizedCall extends ethereum.Call {
  get inputs(): RemoveAuthorizedCall__Inputs {
    return new RemoveAuthorizedCall__Inputs(this);
  }

  get outputs(): RemoveAuthorizedCall__Outputs {
    return new RemoveAuthorizedCall__Outputs(this);
  }
}

export class RemoveAuthorizedCall__Inputs {
  _call: RemoveAuthorizedCall;

  constructor(call: RemoveAuthorizedCall) {
    this._call = call;
  }

  get _toRemove(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAuthorizedCall__Outputs {
  _call: RemoveAuthorizedCall;

  constructor(call: RemoveAuthorizedCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ReviseDepositCall extends ethereum.Call {
  get inputs(): ReviseDepositCall__Inputs {
    return new ReviseDepositCall__Inputs(this);
  }

  get outputs(): ReviseDepositCall__Outputs {
    return new ReviseDepositCall__Outputs(this);
  }
}

export class ReviseDepositCall__Inputs {
  _call: ReviseDepositCall;

  constructor(call: ReviseDepositCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _block(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ReviseDepositCall__Outputs {
  _call: ReviseDepositCall;

  constructor(call: ReviseDepositCall) {
    this._call = call;
  }
}

export class ReviseWithdrawCall extends ethereum.Call {
  get inputs(): ReviseWithdrawCall__Inputs {
    return new ReviseWithdrawCall__Inputs(this);
  }

  get outputs(): ReviseWithdrawCall__Outputs {
    return new ReviseWithdrawCall__Outputs(this);
  }
}

export class ReviseWithdrawCall__Inputs {
  _call: ReviseWithdrawCall;

  constructor(call: ReviseWithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _block(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ReviseWithdrawCall__Outputs {
  _call: ReviseWithdrawCall;

  constructor(call: ReviseWithdrawCall) {
    this._call = call;
  }
}

export class RewardMulUpdateCall extends ethereum.Call {
  get inputs(): RewardMulUpdateCall__Inputs {
    return new RewardMulUpdateCall__Inputs(this);
  }

  get outputs(): RewardMulUpdateCall__Outputs {
    return new RewardMulUpdateCall__Outputs(this);
  }
}

export class RewardMulUpdateCall__Inputs {
  _call: RewardMulUpdateCall;

  constructor(call: RewardMulUpdateCall) {
    this._call = call;
  }

  get _newMulReward(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class RewardMulUpdateCall__Outputs {
  _call: RewardMulUpdateCall;

  constructor(call: RewardMulUpdateCall) {
    this._call = call;
  }
}

export class RewardUpdateCall extends ethereum.Call {
  get inputs(): RewardUpdateCall__Inputs {
    return new RewardUpdateCall__Inputs(this);
  }

  get outputs(): RewardUpdateCall__Outputs {
    return new RewardUpdateCall__Outputs(this);
  }
}

export class RewardUpdateCall__Inputs {
  _call: RewardUpdateCall;

  constructor(call: RewardUpdateCall) {
    this._call = call;
  }

  get _newReward(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RewardUpdateCall__Outputs {
  _call: RewardUpdateCall;

  constructor(call: RewardUpdateCall) {
    this._call = call;
  }
}

export class SetCall extends ethereum.Call {
  get inputs(): SetCall__Inputs {
    return new SetCall__Inputs(this);
  }

  get outputs(): SetCall__Outputs {
    return new SetCall__Outputs(this);
  }
}

export class SetCall__Inputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _withUpdate(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetCall__Outputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }
}

export class SetDevDepFeeCall extends ethereum.Call {
  get inputs(): SetDevDepFeeCall__Inputs {
    return new SetDevDepFeeCall__Inputs(this);
  }

  get outputs(): SetDevDepFeeCall__Outputs {
    return new SetDevDepFeeCall__Outputs(this);
  }
}

export class SetDevDepFeeCall__Inputs {
  _call: SetDevDepFeeCall;

  constructor(call: SetDevDepFeeCall) {
    this._call = call;
  }

  get _devDepFees(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDevDepFeeCall__Outputs {
  _call: SetDevDepFeeCall;

  constructor(call: SetDevDepFeeCall) {
    this._call = call;
  }
}

export class SetDevFeeStageCall extends ethereum.Call {
  get inputs(): SetDevFeeStageCall__Inputs {
    return new SetDevFeeStageCall__Inputs(this);
  }

  get outputs(): SetDevFeeStageCall__Outputs {
    return new SetDevFeeStageCall__Outputs(this);
  }
}

export class SetDevFeeStageCall__Inputs {
  _call: SetDevFeeStageCall;

  constructor(call: SetDevFeeStageCall) {
    this._call = call;
  }

  get _devFees(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetDevFeeStageCall__Outputs {
  _call: SetDevFeeStageCall;

  constructor(call: SetDevFeeStageCall) {
    this._call = call;
  }
}

export class SetMigratorCall extends ethereum.Call {
  get inputs(): SetMigratorCall__Inputs {
    return new SetMigratorCall__Inputs(this);
  }

  get outputs(): SetMigratorCall__Outputs {
    return new SetMigratorCall__Outputs(this);
  }
}

export class SetMigratorCall__Inputs {
  _call: SetMigratorCall;

  constructor(call: SetMigratorCall) {
    this._call = call;
  }

  get _migrator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMigratorCall__Outputs {
  _call: SetMigratorCall;

  constructor(call: SetMigratorCall) {
    this._call = call;
  }
}

export class SetStageEndsCall extends ethereum.Call {
  get inputs(): SetStageEndsCall__Inputs {
    return new SetStageEndsCall__Inputs(this);
  }

  get outputs(): SetStageEndsCall__Outputs {
    return new SetStageEndsCall__Outputs(this);
  }
}

export class SetStageEndsCall__Inputs {
  _call: SetStageEndsCall;

  constructor(call: SetStageEndsCall) {
    this._call = call;
  }

  get _blockEnds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetStageEndsCall__Outputs {
  _call: SetStageEndsCall;

  constructor(call: SetStageEndsCall) {
    this._call = call;
  }
}

export class SetStageStartsCall extends ethereum.Call {
  get inputs(): SetStageStartsCall__Inputs {
    return new SetStageStartsCall__Inputs(this);
  }

  get outputs(): SetStageStartsCall__Outputs {
    return new SetStageStartsCall__Outputs(this);
  }
}

export class SetStageStartsCall__Inputs {
  _call: SetStageStartsCall;

  constructor(call: SetStageStartsCall) {
    this._call = call;
  }

  get _blockStarts(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetStageStartsCall__Outputs {
  _call: SetStageStartsCall;

  constructor(call: SetStageStartsCall) {
    this._call = call;
  }
}

export class SetUserDepFeeCall extends ethereum.Call {
  get inputs(): SetUserDepFeeCall__Inputs {
    return new SetUserDepFeeCall__Inputs(this);
  }

  get outputs(): SetUserDepFeeCall__Outputs {
    return new SetUserDepFeeCall__Outputs(this);
  }
}

export class SetUserDepFeeCall__Inputs {
  _call: SetUserDepFeeCall;

  constructor(call: SetUserDepFeeCall) {
    this._call = call;
  }

  get _usrDepFees(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetUserDepFeeCall__Outputs {
  _call: SetUserDepFeeCall;

  constructor(call: SetUserDepFeeCall) {
    this._call = call;
  }
}

export class SetUserFeeStageCall extends ethereum.Call {
  get inputs(): SetUserFeeStageCall__Inputs {
    return new SetUserFeeStageCall__Inputs(this);
  }

  get outputs(): SetUserFeeStageCall__Outputs {
    return new SetUserFeeStageCall__Outputs(this);
  }
}

export class SetUserFeeStageCall__Inputs {
  _call: SetUserFeeStageCall;

  constructor(call: SetUserFeeStageCall) {
    this._call = call;
  }

  get _userFees(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetUserFeeStageCall__Outputs {
  _call: SetUserFeeStageCall;

  constructor(call: SetUserFeeStageCall) {
    this._call = call;
  }
}

export class StarblockUpdateCall extends ethereum.Call {
  get inputs(): StarblockUpdateCall__Inputs {
    return new StarblockUpdateCall__Inputs(this);
  }

  get outputs(): StarblockUpdateCall__Outputs {
    return new StarblockUpdateCall__Outputs(this);
  }
}

export class StarblockUpdateCall__Inputs {
  _call: StarblockUpdateCall;

  constructor(call: StarblockUpdateCall) {
    this._call = call;
  }

  get _newstarblock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StarblockUpdateCall__Outputs {
  _call: StarblockUpdateCall;

  constructor(call: StarblockUpdateCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _ref(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
